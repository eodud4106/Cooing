<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cooing.www.album.dao.AlbumMapper">
	<insert id="personal_createAlbum" parameterType="album">
		insert into ALBUMLIST (
			ALBUM_NUM,
			ALBUM_WRITER,
			album_name,
			ALBUM_OPENRANGE,
			album_category,
			isPersonal
		)
		values (
			ALBUMLIST_SEQ.nextval,
			#{album_writer},
			#{album_name},
			#{album_openrange},
			#{album_category},
			#{isPersonal}
		)
		<selectKey keyProperty="album_num" resultType="Integer" order="AFTER"> 
			SELECT ALBUMLIST_SEQ.currval FROM dual
		</selectKey>
	</insert>
	
	<insert id="personal_insertAlbumOfPage" parameterType="page">
		MERGE INTO page p1
		USING
		(
			SELECT
				#{album_num} as album_num
				, #{page_num} as page_num
			FROM
				dual
		) p2
		ON ( p1.album_num = p2.album_num AND p1.page_num = p2.page_num)
		WHEN MATCHED THEN
			UPDATE
			SET
				page_html = #{page_html}
				, page_background = #{page_background}
				, page_color = #{page_color}
		WHEN NOT MATCHED THEN
			INSERT ( 
				page_id
				, album_num
				, page_num
				, page_html
				, page_background
				, page_color
		     )
			 VALUES (
				page_seq.nextval
				, #{album_num}
				, #{page_num}
				, #{page_html}
				, #{page_background}
				, #{page_color}
			 )
	</insert>
	
	<select id="total_album_list" parameterType="Map" resultType="album">
			<if test="check == 2">
			select a.*
				from albumlist a left outer join (
					select likeit_albumnum as album_num , count(*) as count
					from likeit
					group by likeit_albumnum	
				) l 
				on a.album_num = l.album_num
			</if>			
			<if test="check != 2">
			select * from albumlist 
			</if>			
			where 				
			<!-- 1번은 검색 -->
			<if test="check == 1 ">			
				album_writer like '%'||#{search_writer}||'%'
				or album_name like '%'||#{search_writer}||'%'
				or album_contents like '%'||#{search_writer}||'%'
				or album_num in(
					select tag_albumnum as album_num
					from tag
					where tag_content like '%'||#{search_writer}||'%'
					group by tag_albumnum
				)
			</if>
			<!-- 2번은 좋아요 리스트 조인이라 a가 붙어서 합칠수 없음 -->
			<if test="check == 2 ">
				a.album_openrange = 4
				or a.album_writer = #{search_writer}
				or a.album_num in(
					select specific_albumnum as album_num
					from specific
					where specific_memberid = #{search_writer}
				)		
				or a.album_num in(
					select album_num
					from albumlist
					where album_openrange = 2
					and album_writer in(
						select friend_id1 as album_writer
						from friend
						where friend_id2 = #{search_writer}
					)
				)
			</if>
			<!-- 3번은 총합 앨범리스트 , 4번은 없지만 내 리스트 -->
			<if test="check != 1 and check != 2 and check != 5">
				<if test="check == 3">
					album_openrange = 4 or
				</if>
				album_writer = #{search_writer}
				or album_num in(
					select specific_albumnum as album_num
					from specific
					where specific_memberid = #{search_writer}
				)		
				or album_num in(
					select album_num
					from albumlist
					where album_openrange = 2
					and album_writer in(
						select friend_id1 as album_writer
						from friend
						where friend_id2 = #{search_writer}
					)
				)			
			</if>
			<!-- 5번은 ID로 찾기 -->
			<if test="check == 5">
				album_writer = #{search_writer} 
	   			and (album_openrange = 2 or album_openrange = 4)	    
			</if>
			<if test="check != 2">
				order by album_num desc
			</if>
			<if test="check == 2">
		        order by l.count desc
			</if>
	</select>	
	
	<select id="total_album_count" parameterType="Map" resultType="int">
			select count(*) from albumlist 
			<if test="check == 2">
			 a left outer join (
					select likeit_albumnum as album_num , count(*) as count
					from likeit
					group by likeit_albumnum	
				) l 
				on a.album_num = l.album_num
			</if>			
			where			
			<!-- 1번은 검색 -->
			<if test="check == 1 ">			
				album_writer like '%'||#{search_writer}||'%'
				or album_name like '%'||#{search_writer}||'%'
				or album_contents like '%'||#{search_writer}||'%'
				or album_num in(
					select tag_albumnum as album_num
					from tag
					where tag_content like '%'||#{search_writer}||'%'
					group by tag_albumnum
				)
			</if>
			<!-- 2번은 좋아요 리스트 조인이라 a가 붙어서 합칠수 없음 -->
			<if test="check == 2 ">
				a.album_openrange = 4
				or a.album_writer = #{search_writer}
				or a.album_num in(
					select specific_albumnum as album_num
					from specific
					where specific_memberid = #{search_writer}
				)		
				or a.album_num in(
					select album_num
					from albumlist
					where album_openrange = 2
					and album_writer in(
						select friend_id1 as album_writer
						from friend
						where friend_id2 = #{search_writer}
					)
				)
			</if>
			<!-- 3번은 총합 앨범리스트 , 4번은 없지만 내 리스트 -->
			<if test="check != 1 and check != 2 and check != 5">
				<if test="check == 3">
					album_openrange = 4 or
				</if>
				album_writer = #{search_writer}
				or album_num in(
					select specific_albumnum as album_num
					from specific
					where specific_memberid = #{search_writer}
				)		
				or album_num in(
					select album_num
					from albumlist
					where album_openrange = 2
					and album_writer in(
						select friend_id1 as album_writer
						from friend
						where friend_id2 = #{search_writer}
					)
				)			
			</if>
			<!-- 5번은 ID로 찾기 -->
			<if test="check == 5">
				album_writer = #{search_writer} 
	   			and (album_openrange = 2 or album_openrange = 4)	    
			</if>
	</select>
	
	<update id="personal_update_page1_Album" parameterType="album">
		update albumlist set 
			album_name = #{album_name},
			album_contents = #{album_contents},
			album_category = #{album_category},
			album_openrange = #{album_openrange}
		where
			album_num = #{album_num}
	</update>
	
	<update id="updateThumbnail" parameterType="map">
		update albumlist set album_thumbnail = #{album_thumbnail}
			where album_num = #{album_num}
	</update>
	
	<select id="searchCategory" parameterType="int" resultType="album">
		select * from albumlist 
			where album_category=#{album_category}
			order by album_num desc
	</select>
	
	<select id="searchAlbumNum" parameterType="int" resultType="album">
		select * from albumlist	where album_num=#{searchnum}
	</select>
	
	<select id="searchPage1" parameterType="int" resultType="page">
		select * from page	where album_num=#{number} and page_num=1
	</select>
	
	<delete id="deleteAlbum" parameterType="int">
		delete	from albumlist where album_num=#{album_num}
	</delete>	
	
	<select id="CategoryAlbumCount" parameterType="int" resultType="int">
		select count(*)  from albumlist where album_category = #{album_category}
	</select>
	
	<!-- 앨범 넘버로 앨범 내 페이지 검색 -->
	<select id="select_pages_by_album_num" parameterType="int" resultType="page">
		SELECT
			* 
		FROM
			page 
		WHERE
			album_num = #{album_num}
		ORDER BY
			page_num asc
	</select>
	
	<!-- 앨범 넘버로 앨범 내 페이지 전체 삭제 -->
	<delete id="delete_pages_by_album_num" parameterType="int">
		DELETE
			page 
		WHERE
			album_num = #{album_num}
	</delete>
	
	<!-- 앨범을 검색함... -->
	<select id="select_album" resultType="album" parameterType="album">
		SELECT *
		FROM albumlist
		WHERE
			album_writer = #{album_writer}
			AND
			isPersonal = #{isPersonal}
	</select>
	
</mapper>
