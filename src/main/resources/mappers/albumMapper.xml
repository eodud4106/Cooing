<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cooing.www.album.dao.AlbumMapper">
	<insert id="personal_createAlbum" parameterType="album">
		insert into ALBUMLIST (
			ALBUM_NUM,
			ALBUM_WRITER,
			album_name,
			ALBUM_OPENRANGE,
			album_category,
			isPersonal
		)
		values (
			ALBUMLIST_SEQ.nextval,
			#{album_writer},
			#{album_name},
			#{album_openrange},
			#{album_category},
			#{isPersonal}
		)
		<selectKey keyProperty="album_num" resultType="Integer" order="AFTER"> 
			SELECT ALBUMLIST_SEQ.currval FROM dual
		</selectKey>
	</insert>
	
	<insert id="personal_insertAlbumOfPage" parameterType="page">
		MERGE INTO page p1
		USING
		(
			SELECT
				#{album_num} as album_num
				, #{page_num} as page_num
			FROM
				dual
		) p2
		ON ( p1.album_num = p2.album_num AND p1.page_num = p2.page_num)
		WHEN MATCHED THEN
			UPDATE
			SET
				page_html = #{page_html}
				, page_background = #{page_background}
				, page_color = #{page_color}
		WHEN NOT MATCHED THEN
			INSERT ( 
				page_id
				, album_num
				, page_num
				, page_html
				, page_background
				, page_color
		     )
			 VALUES (
				page_seq.nextval
				, #{album_num}
				, #{page_num}
				, #{page_html}
				, #{page_background}
				, #{page_color}
			 )
	</insert>
	
	<select id="total_album_list" parameterType="Map" resultType="album">
			<if test="check == 2">
				select a.*
					from albumlist a left outer join (
						select likeit_albumnum as album_num , count(*) as count
						from likeit
						group by likeit_albumnum	
					) l 
					on a.album_num = l.album_num
			</if>			
			<if test="check != 2">
				select * from albumlist 
			</if>			
			where 				
			<!-- 2번은 좋아요 리스트 조인이라 a가 붙어서 합칠수 없음 -->
			<if test="check == 2 ">
				(
					<if test="search != null">
				    ( 
				    	lower(a.album_contents) like lower('%'||#{search}||'%')
				        or lower(a.album_name) like lower('%'||#{search}||'%')
				        or lower(a.album_writer) like lower('%'||#{search}||'%')
				    )and
				    </if>
				    (
				    	a.album_writer = #{search_writer}
				        or a.album_openrange = 4		
				        or a.album_num in(
				            select album_num
				            from albumlist
				            where album_openrange = 2
				            and album_writer in(
				                select friend_id1 as album_writer
				                from friend
				                where friend_id2 = #{search_writer}
				            )
				        )
			        )
			    )
			</if>
			<!-- 3번은 총합 앨범리스트 , 4번은 없지만 내 리스트  어느때든 검사하기에 1번 검색 기능은 딱히 필요 없을 듯 -->
			<if test="check == 3 or check ==4">
				(
					<if test="search != null">
					   	( 
							lower(album_contents) like lower('%'||#{search}||'%')
					        or lower(album_name) like lower('%'||#{search}||'%')
					        or lower(album_writer) like lower('%'||#{search}||'%')
					 	)and
					</if>
					<if test="check == 3">
					(
						album_openrange = 4 
						or album_writer = #{search_writer}		
						or album_num in(
							select album_num
							from albumlist
							where album_openrange = 2
							and album_writer in(
								select friend_id1 as album_writer
								from friend
								where friend_id2 = #{search_writer}
							)
						)	
					)
					</if>
					<if test="check == 4">
					(
						album_writer = #{search_writer}	
					)
					</if>
				)		
			</if>
			<!-- 5번은 친구든 모르는 사람이든 페이지  -->
			<if test="check == 5">
				<if test="search != null">
					( 
						lower(album_contents) like lower('%'||#{search}||'%')
				        or lower(album_name) like lower('%'||#{search}||'%')
				        or lower(album_writer) like lower('%'||#{search}||'%')
					 )and
				</if>
				(
					album_writer = #{search_writer} 
					and(
						album_num in(
							select album_num
							from albumlist
							where album_openrange = 2
							and album_writer in(
								select friend_id1 as album_writer
								from friend
								where friend_id2 = #{self_id}
							)
                        
                        )
                        or album_openrange = 4
					)
				)	    
			</if>
			<if test="check != 2">
				order by album_num desc
			</if>
			<if test="check == 2">
		        order by l.count desc
			</if>
	</select>	
	
	<select id="total_album_count" parameterType="Map" resultType="int">
			select count(*) from albumlist 
			<if test="check == 2">
			 a left outer join (
					select likeit_albumnum as album_num , count(*) as count
					from likeit
					group by likeit_albumnum	
				) l 
				on a.album_num = l.album_num
			</if>			
			where			
			<!-- 2번은 좋아요 리스트 조인이라 a가 붙어서 합칠수 없음 -->
			<if test="check == 2 ">
				a.album_openrange = 4
				or a.album_writer = #{search_writer}
				or a.album_num in(
					select specific_albumnum as album_num
					from specific
					where specific_memberid = #{search_writer}
				)		
				or a.album_num in(
					select album_num
					from albumlist
					where album_openrange = 2
					and album_writer in(
						select friend_id1 as album_writer
						from friend
						where friend_id2 = #{search_writer}
					)
				)
			</if>
			<!-- 3번은 총합 앨범리스트 , 4번은 없지만 내 리스트 -->
			<if test="check == 3 or check ==4">
				(
					<if test="search != null">
					   	( 
							lower(album_contents) like lower('%'||#{search}||'%')
					        or lower(album_name) like lower('%'||#{search}||'%')
					        or lower(album_writer) like lower('%'||#{search}||'%')
					 	)and
					</if>
					<if test="check == 3">
					(
						album_openrange = 4 
						or album_writer = #{search_writer}		
						or album_num in(
							select album_num
							from albumlist
							where album_openrange = 2
							and album_writer in(
								select friend_id1 as album_writer
								from friend
								where friend_id2 = #{search_writer}
							)
						)	
					)
					</if>
					<if test="check == 4">
					(
						album_writer = #{search_writer}	
					)
					</if>
				)		
			</if>
			<!-- 5번은 ID로 찾기 -->
			<if test="check == 5">
				<if test="search != null">
					( 
							lower(album_contents) like lower('%'||#{search}||'%')
					        or lower(album_name) like lower('%'||#{search}||'%')
					        or lower(album_writer) like lower('%'||#{search}||'%')
					 )and
				</if>
				(
					album_writer = #{search_writer} 
					and(
						album_num in(
							select album_num
							from albumlist
							where album_openrange = 2
							and album_writer in(
								select friend_id1 as album_writer
								from friend
								where friend_id2 = #{self_id}
							)
                        )
                        or album_openrange = 4
					)
				)	    
			</if>
	</select>
	
	<update id="personal_update_page1_Album" parameterType="album">
		update albumlist set 
			album_name = #{album_name},
			album_contents = #{album_contents},
			album_category = #{album_category},
			album_openrange = #{album_openrange}
		where
			album_num = #{album_num}
	</update>
	
	<update id="updateThumbnail" parameterType="map">
		update albumlist set album_thumbnail = #{album_thumbnail}
			where album_num = #{album_num}
	</update>
	
	<select id="searchAlbumNum" parameterType="int" resultType="album">
		select * from albumlist	where album_num=#{searchnum}
	</select>
	
	<select id="searchPage1" parameterType="int" resultType="page">
		select * from page	where album_num=#{number} and page_num=1
	</select>
	
	<delete id="deleteAlbum" parameterType="int">
		delete from albumlist where album_num=#{album_num}
	</delete>
	
	<!-- 앨범 넘버로 앨범 내 페이지 검색 -->
	<select id="select_pages_by_album_num" parameterType="int" resultType="page">
		SELECT
			* 
		FROM
			page 
		WHERE
			album_num = #{album_num}
		ORDER BY
			page_num asc
	</select>
	
	<!-- 앨범 넘버로 앨범 내 페이지 전체 삭제 -->
	<delete id="delete_pages_by_album_num" parameterType="int">
		DELETE
			page 
		WHERE
			album_num = #{album_num}
	</delete>
	
	<!-- 앨범을 검색함... -->
	<select id="select_album" resultType="album" parameterType="album">
		SELECT *
		FROM albumlist
		WHERE
			album_writer = #{album_writer}
			AND
			isPersonal = #{isPersonal}
	</select>
	
	<select id="select_album_count" resultType="int" parameterType="album">
		SELECT count(*)
		FROM albumlist
		WHERE
			album_writer = #{album_writer}
			AND
			isPersonal = #{isPersonal}
	</select>
	
	<select id="searchCategory" parameterType="int" resultType="album">
		<if test="check != 2">
			select * from albumlist
		</if>
		<if test="check == 2">
			select a.*
		    from albumlist a left outer join (
		        select likeit_albumnum as album_num , count(*) as count
		        from likeit
		        group by likeit_albumnum	
		    ) l 
		    on a.album_num = l.album_num
		</if> 
		where 
		<if test="check != 2">
			album_category=#{categorynum}
			and
			<if test="check == 4">
			album_writer = #{album_writer}
			</if>
			<if test="check == 5">
			(
				album_writer = #{search_writer} 
				and(
					album_num in(
						select album_num
						from albumlist
						where album_openrange = 2
						and album_writer in(
							select friend_id1 as album_writer
							from friend
							where friend_id2 = #{self_id}
						)
                       )
                       or album_openrange = 4
				)
			)
			</if>
			<if test="check == 3">
		    (
		    album_writer = #{album_writer}
		    or album_openrange = 4		
		    or album_num in(
		        select album_num
		        from albumlist
		        where album_openrange = 2
		        and album_writer in(
		            select friend_id1 as album_writer
		            from friend
		            where friend_id2 = #{album_writer}
		        	)	
		    	)
  			)
  			</if>
		</if>
		<if test="check == 2">
			a.album_category = #{categorynum}
		    and
		    (
		    a.album_writer = #{album_writer}
		    or a.album_openrange = 4		
		    or a.album_num in(
		        select album_num
		        from albumlist
		        where album_openrange = 2
		        and album_writer in(
		            select friend_id1 as album_writer
		            from friend
		            where friend_id2 = #{album_writer}
		        	)	
		    	)
  			)
		</if>
		<if test="check != 2">
			order by album_num desc
		</if>
		<if test="check == 2">
			order by a.album_num desc
		</if>
	</select>
	
	<select id="searchCategoryCount" parameterType="Map" resultType="int">
		<if test="check != 2">
			select count(*) from albumlist
		</if>
		<if test="check == 2">
			select count(*)
		    from albumlist a left outer join (
		        select likeit_albumnum as album_num , count(*) as count
		        from likeit
		        group by likeit_albumnum	
		    ) l 
		    on a.album_num = l.album_num
		</if> 
		where 
		<if test="check != 2">
			album_category=#{categorynum}
			and
			<if test="check == 4">
			album_writer = #{album_writer}
			</if>
			<if test="check == 5">
			(
				album_writer = #{search_writer} 
				and(
					album_num in(
						select album_num
						from albumlist
						where album_openrange = 2
						and album_writer in(
							select friend_id1 as album_writer
							from friend
							where friend_id2 = #{self_id}
						)
                       )
                       or album_openrange = 4
				)
			)
			</if>
			<if test="check == 3">
		    (
		    album_writer = #{album_writer}
		    or album_openrange = 4		
		    or album_num in(
		        select album_num
		        from albumlist
		        where album_openrange = 2
		        and album_writer in(
		            select friend_id1 as album_writer
		            from friend
		            where friend_id2 = #{album_writer}
		        	)	
		    	)
  			)
  			</if>
		</if>
		<if test="check == 2">
			a.album_category = #{categorynum}
		    and
		    (
		    a.album_writer = #{album_writer}
		    or
		    a.album_openrange = 4		
		    or a.album_num in(
		        select album_num
		        from albumlist
		        where album_openrange = 2
		        and album_writer in(
		            select friend_id1 as album_writer
		            from friend
		            where friend_id2 = #{album_writer}
		        	)	
		    	)
  			)
		</if>
	</select>
	
	<select id="get_album_list" resultType="album" parameterType="hashmap">
	SELECT *
	FROM
	(SELECT
	    a.album_num,
	    a.album_writer,
	    a.album_name,
	    a.album_contents,
	    a.album_openrange,
	    a.album_category,
	    a.album_thumbnail,
	    a.isPersonal,
	    nvl(lr.like_count, 0) as like_count,
	    nvl(lr.reply_count, 0) as reply_count
	FROM
	    albumlist a
	LEFT OUTER JOIN
	    (   
	    SELECT
	        l.album_num as album_num,
	        l.like_count,
	        r.reply_count
	    FROM
	        (SELECT
	            likeit_albumnum as album_num,
	            count(*) as like_count
	        FROM
	            likeit
	        GROUP BY
	           likeit_albumnum
	        )l
	    JOIN
	        (SELECT
	            reply_albumnum as album_num,
	            count(*) as reply_count
	        FROM
	            reply
	        GROUP BY
	            reply_albumnum
	        )r
	    ON
	        l.album_num = r.album_num
	    ) lr
	ON
	    a.album_num = lr.album_num
	)
    WHERE
		1 = 1
		<if test="type == 'total'">
		AND album_openrange = 4
		</if>
		<!-- 홈 페이지에서 검색어 없이 로딩하는 것 외의 경우는 아직 기능 테스트가 안 되었으니 사용하지 마세요.... -->
		<if test="type == 'writer'">
		AND a.album_writer = #{keyword}
			<if test="writer_type == 'total'">
			AND 1 = 1
			</if>
			<if test="writer_type == 'personal'">
			AND isPersonal = 1
			</if>
			<if test="writer_type == 'party'">
			AND isPersonal = 0
			</if>
		</if>
		<if test="type == 'like'">
		AND a.album_writer = #{keyword}
		AND like_count > 0
		</if>
	ORDER BY
		<if test="order == 'date'">
		album_num desc
		</if>
		<if test="order == 'like'">
		like_count desc
		</if>
	</select>

</mapper>
